#!/usr/bin/env bash

set -eo pipefail
[[ "$TRACE" ]] && set -x

declare clean_src=false
readonly src_dir="$(echo ~/src )"

init() {
  if [[ ! -d "$src_dir" ]]; then
    mkdir "$src_dir"
    clean_src=true
  fi
}

finalize() {
  $clean_src && [[ -d "$src_dir" ]] && rm -rf "$src_dir"
}

set_locales() {
  export LC_ALL=en_US.UTF-8
  export LANG=en_US.UTF-8
  export LANGUAGE=en_US.UTF-8

  if [ ! -f '/etc/profile.d/set_locales.sh' ]; then

    sudo tee /etc/profile.d/set_locales.sh 2> 1 1> /dev/null <<-EOF
	export LC_ALL=en_US.UTF-8
	export LANG=en_US.UTF-8
	export LANGUAGE=en_US.UTF-8
        EOF

  fi  
}

install_dependencies() {
  sudo apt-get update
  sudo apt-get install -y git tcl build-essential libtool libssl-dev autoconf automake
}


make_swap() {
  sudo fallocate -l 4G /swapfile
  sudo chmod 600 /swapfile
  sudo mkswap /swapfile
  sudo swapon /swapfile
  echo "/swapfile   none    swap    sw    0   0" | sudo tee /etc/fstab 2> 1 1> /dev/null  
}


install_java() {
  sudo add-apt-repository -y ppa:webupd8team/java
  sudo apt-get update
  sudo apt-get install -y oracle-java8-installer
  sudo apt-get install -y oracle-java8-set-default
}


install_dynomite() {

  cd "$src_dir"
  git clone https://github.com/Netflix/dynomite.git
  cd dynomite/
  autoreconf -fvi
  ./configure --enable-debug=log
  make

  sudo mkdir -p /apps/dynomite/bin
  sudo cp "$src_dir/dynomite/src/dynomite /apps/dynomite/bin/"
  sudo cp "$src_dir/dynomite/bin/*" /apps/dynomite/bin/

  sudo mkdir -p /apps/dynomite/conf/
  sudo tee /apps/dynomite/conf/dynomite.yml 2> 1 1> /dev/null <<-EOF
	dyn_o_mite:
	  dyn_listen: 0.0.0.0:8101
	  data_store: 0
	  listen: 0.0.0.0:8102
	  dyn_seed_provider: dynomitemanager_provider
	  servers:
	    - 127.0.0.1:22122:1
	  tokens: '1383429731'
	  auto_eject_hosts: true
	  rack: null
	  distribution: vnode
	  gos_interval: 10000
	  hash: murmur
	  preconnect: true
	  server_retry_timeout: 30000
	  timeout: 5000
	  secure_server_option: datacenter
	  datacenter: us-west-2
	  read_consistency: DC_ONE
	  write_consistency: DC_ONE
	  pem_key_file: /apps/dynomite/conf/dynomite.pem
	  EOF

  sudo cp "$src_dir/dynomite/conf/recon_*" /apps/dynomite/conf/
  sudo cp "$src_dir/dynomite/conf/*.pem" /apps/dynomite/conf/
}

install_redis() {

  cd "$src_dir"
  wget http://download.redis.io/releases/redis-3.0.4.tar.gz
  tar xzf redis-3.0.4.tar.gz
  cd redis-3.0.4/
  cd deps ; make hiredis jemalloc linenoise lua ; cd ..
  make
  make test
  sudo make install

  sudo bash utils/install_server.sh <<-EOF
	22122
	/apps/nfredis/conf/redis.conf
	/var/log/redis_22122.log
	/mnt/data/nfredis/
	/usr/local/bin/redis-server
	EOF

}

install_jetty() {
  cd "$src_dir"
  wget http://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/9.3.10.v20160621/jetty-distribution-9.3.10.v20160621.tar.gz
  tar xzf jetty-distribution-9.3.10.v20160621.tar.gz

  sudo mkdir /apps/jetty_home
  sudo mkdir /apps/jetty_home/temp
  sudo cp -r jetty-distribution-9.3.10.v20160621/* /apps/jetty_home/

  sudo mkdir -p /apps/jetty_base

  sudo useradd --user-group --shell /bin/false --home-dir /apps/jetty_home/temp jetty

  sudo mkdir /var/run/jetty

  sudo chown -R jetty:jetty /var/run/jetty

  cd /apps/jetty_base
  sudo java -jar /apps/jetty_home/start.jar --add-to-start=deploy,http,logging

  sudo cp /apps/jetty_home/bin/jetty.sh /etc/init.d/jetty

  sudo tee /etc/default/jetty 2> 1 1> /dev/null <<-EOF
	JETTY_USER=jetty
	JETTY_HOME=/apps/jetty_home
	JETTY_BASE=/apps/jetty_base
	JETTY_PID=/var/run/jetty/jetty.pid
	TMPDIR=/apps/jetty_home/temp
	EOF

  sudo chown -R jetty:jetty /apps/jetty_home
  sudo chown -R jetty:jetty /apps/jetty_base

  sudo service jetty start
}

main() {
  trap "finalize;" INT TERM EXIT
  init
  set_locales
  make_swap
  install_dependencies
  install_java
  install_dynomite
  install_redis
  install_jetty
  trap - INT TERM EXIT
}

[[ "$0" == "$BASH_SCRIPT" ]] && main

